<?php

//function for generating base url
//base_url gives relative path
//when displaying uploaded images(it comes server side)
function base_url($path = '')
{
    if(defined('BASE_URL'))
    {
        return BASE_URL.ltrim($path,'/');
    }
    //https:// or http://
    $protocol = (!empty($_SERVER['HTTPS'])
    && $_SERVER['HTTPS'] !== 'off')
    || $_SERVER['SERVER_PORT'] == 443?"https://":"http://";

    //gintoki.com/ 
    $host = $_SERVER['HTTP_HOST'];//this gives domain name and port number if there

    // /blog
    $base = rtrim(dirname($_SERVER['SCRIPT_NAME']),"/");

    // $_SERVER['SCRIPT_NAME']) gives full path to the script
    //from the root directory

    return $protocol.$host.'/'.ltrim($path,'/');

}

//base_path gives absolute path
//when we need to upload the image 
function base_path($path = '')
{
    //realpath function converts relative path to
    //absolute path . It eliminates any symbolic links
    // , .. (parent directory), and . (current directory) components to return a clean, absolute path.
    //else it returns false

    //it will go to app directory then go up one directory
    //so path is given from mvc_app

return realpath(__DIR__.'/../' . '/'.ltrim($path,'/'));
}
//views_path creates path relative to view folder
function views_path($path='')
{
return base_path('app/views/' . ltrim($path,'/'));
}

function redirect($path = '', $queryParams=[])
{
    $url = base_url($path);

    if(!empty($queryParams))
    {
        $url .= "?" . http_build_query($queryParams);
    // http_build_query() this method generates url encoded
    //query string from associative array

    }
    header("Location: " . $url);
    exit();
}
//idea for embedding the content dynamically
//we get unique content from the specific page
// via output buffer and embed it into the general page(template)


// render method takes the view : The name of
//  the view file to be rendered .
//and data that we need to send to the view
function render($view, $data = [], $layout = 'layout'){
//extract will converts array keys into variables
extract($data);

//output buffer is a temporary container
//for hmtl,css

//this will start output buffer, 
// allowing you to capture all output (HTML, CSS) generated by the view file.
ob_start();

//this will include specific files from views
// below line generates the content for the view.

//here path i given realtive to app/views/____.php
require views_path( $view . '.php');

//the above view is not displayed on browser
//because we have stored it in buffer

// below line stops the buffering and retrieves the generated HTML from the view.
$content = ob_get_clean();//this will get content from buffer

// you can use the $content variable to embed the view’s output within the overall page structure defined in the layout.
require  views_path($layout . '.php');

//the above is the general layout and we are choosing it
//dynamically from  multiple layout
}

//using like config('database.host')
//method for getting config info
function config($key)
{
    $config = require base_path('config/config.php');
    $keys = explode('.',$key);//string to array
    $value = $config;

    foreach($keys as $k)
    {
        if(!isset($value[$k]))
        {
            throw new Exception("Config key '{$k}' not found ");
        }
        //suppose we have passed database.host as key
        //first check $value['database']
        //if exist then $value will become $value['database]
        //now it checks for host
        //if $value['database']['host] is there then
        //$value will have $value['database']['host]
        $value = $value[$k];
        
    }
    return $value;
}

//below function is used for sanitizing  the inputs 
function sanitize($value)
{
    return htmlspecialchars(strip_tags($value));

}

function isLoggedIn()
{
    return isset($_SESSION['user_id']);
}

function getUserFullName()
{
    if(isset($_SESSION['first_name'])&&isset($_SESSION['last_name']))
    {
        return $_SESSION['first_name'].' '.$_SESSION['last_name'];
    }
    else
    {
        return $_SESSION['username'];
    }
}

function setSessionMessage($type, $message)
{
    $message = htmlspecialchars($message, ENT_QUOTES, "UTF-8");
   $_SESSION[$type] = $message;
}
?>